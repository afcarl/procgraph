.. |towrite| replace:: **to write** 

.. _`pgdoc:procgraph.components`:

Summary 
============================================================


:ref:`module:procgraph.components.debug_components`

Components used for debugging and unit tests.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`clock <block:clock>`                                                                                                                                                                               None                                                                                                                                                                                                    
:ref:`constant <block:constant>`                                                                                                                                                                         Output a numerical constant that never changes.                                                                                                                                                         
:ref:`gain <block:gain>`                                                                                                                                                                                 FIXME: to be replaced by simpler function.                                                                                                                                                              
:ref:`identity <block:identity>`                                                                                                                                                                         This block outputs the inputs, unchanged.                                                                                                                                                               
:ref:`info <block:info>`                                                                                                                                                                                 Prints more compact information about the inputs than :ref:`block:print`.                                                                                                                               
:ref:`print <block:print>`                                                                                                                                                                               Print a representation of the input values along with their timestamp.                                                                                                                                  
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.dynamic`

Blocks performing operations with a dynamic nature. 

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`derivative <block:derivative>`                                                                                                                                                                     Computes the derivative of a quantity with 3 taps  (``x[t+1] - x[t-1]``). See also :ref:`block:derivative2`.                                                                                            
:ref:`derivative2 <block:derivative2>`                                                                                                                                                                   Computes the derivative of a quantity with 2 taps (``x[t+1] - x[t]``). See also :ref:`block:derivative`.                                                                                                
:ref:`forward_difference <block:forward_difference>`                                                                                                                                                     Computes ``x[t+1] - x[t-1]`` normalized with timestamp.                                                                                                                                                 
:ref:`fps_data_limit <block:fps_data_limit>`                                                                                                                                                             This block limits the output update to a certain framerate.                                                                                                                                             
:ref:`fps_print <block:fps_print>`                                                                                                                                                                       Prints the fps count for the input signals.                                                                                                                                                             
:ref:`history <block:history>`                                                                                                                                                                           This block collects the history of a quantity, and outputs two signals ``x`` and ``t``. See also :ref:`block:historyt` and :ref:`block:last_n_samples`.                                                 
:ref:`historyt <block:historyt>`                                                                                                                                                                         This block collects the signals samples of a signals, and outputs *one* signal containing a tuple  ``(t,x)``. See also :ref:`block:last_n_samples` and :ref:`block:history`.                            
:ref:`last_n_samples <block:last_n_samples>`                                                                                                                                                             This block collects the last N samples of a signals, and outputs two signals ``x`` and ``t``. See also :ref:`block:historyt` and :ref:`block:history`.                                                  
:ref:`sieve <block:sieve>`                                                                                                                                                                               This block decimates the data in time by transmitting only one in ``n`` updates.                                                                                                                        
:ref:`sync <block:sync>`                                                                                                                                                                                 This block synchronizes a set of streams to the first stream (the master).                                                                                                                              
:ref:`two_step_difference <block:two_step_difference>`                                                                                                                                                   Computes ``x[t+1] - x[t]`` normalized with timestamp.                                                                                                                                                   
:ref:`wait <block:wait>`                                                                                                                                                                                 This block waits a given number of updates before transmitting the output.                                                                                                                              
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.gui`

Blocks using Matplotlib to display data.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`fps_limit <block:fps_limit>`                                                                                                                                                                       This block limits the output update to a certain *realtime* framerate.                                                                                                                                  
:ref:`plot <block:plot>`                                                                                                                                                                                 Just plots the vector instantaneously.                                                                                                                                                                  
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.images`

Blocks for basic operations on images. 

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`compose <block:compose>`                                                                                                                                                                           Compose several images in the same canvas.                                                                                                                                                              
:ref:`grid <block:grid>`                                                                                                                                                                                 A block that creates a larger image by arranging them in a grid.                                                                                                                                        
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.misc`

Miscellaneous functions to be better organized.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`as_json <block:as_json>`                                                                                                                                                                           Converts the input into a JSON string.                                                                                                                                                                  
:ref:`pickle <block:pickle>`                                                                                                                                                                             Dumps the input as a :py:mod:`pickle` file.                                                                                                                                                             
:ref:`to_file <block:to_file>`                                                                                                                                                                           Prints the input line by line to a given file.                                                                                                                                                          
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.robotics`

Some functions specific to robotics applications.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`laser_display <block:laser_display>`                                                                                                                                                               Produces a plot of a range-finder scan.                                                                                                                                                                 
:ref:`pose2commands <block:pose2commands>`                                                                                                                                                               Computes the velocity commands from the odometry data.                                                                                                                                                  
:ref:`pose2vel_ <block:pose2vel_>`                                                                                                                                                                       Block used by :ref:`block:pose2commands`.                                                                                                                                                               
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.signals`

Simple routins for signals extraction, combination.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`extract <block:extract>`                                                                                                                                                                           This block extracts some of the components of a vector.                                                                                                                                                 
:ref:`join <block:join>`                                                                                                                                                                                 This block joins multiple signals into one.                                                                                                                                                             
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.statistics`

Blocks for common statistical operations.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`covariance <block:covariance>`                                                                                                                                                                     Computes the covariance matrix of the input                                                                                                                                                             
:ref:`expectation <block:expectation>`                                                                                                                                                                   Computes the sample expectation of a signal.                                                                                                                                                            
:ref:`normalize <block:normalize>`                                                                                                                                                                       Removes the mean from a signal.                                                                                                                                                                         
:ref:`soft_variance <block:soft_variance>`                                                                                                                                                               Computes the element-wise "soft" variance (expectation of error absolute value)                                                                                                                         
:ref:`variance <block:variance>`                                                                                                                                                                         Computes the element-wise variance.                                                                                                                                                                     
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


:ref:`module:procgraph.components.video`

Blocks for encoding/decoding video based on MPlayer.

======================================================================================================================================================================================================== ========================================================================================================================================================================================================
:ref:`mencoder <block:mencoder>`                                                                                                                                                                         Encodes a video stream using ``mencoder``.                                                                                                                                                              
:ref:`mplayer <block:mplayer>`                                                                                                                                                                           Decodes a video stream.                                                                                                                                                                                 
======================================================================================================================================================================================================== ========================================================================================================================================================================================================


.. _`module:procgraph.components.debug_components`:


.. rst-class:: procgraph:module

Module ``procgraph.components.debug_components``
============================================================



.. rst-class:: procgraph:desc

Components used for debugging and unit tests.

.. _`block:clock`:


.. rst-class:: procgraph:block

``clock``
------------------------------------------------------------

.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/debug_components/__init__.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/debug_components/__init__.py>`_. 


.. _`block:constant`:


.. rst-class:: procgraph:block

``constant``
------------------------------------------------------------
Output a numerical constant that never changes. 

Example: ::

    |constant value=42 name=meaning| -> ...

Two parameters:

* ``value``, necessary
* ``name``, optional signal name (default: const)


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``value``: Constant value to output.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/debug_components/constant.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/debug_components/constant.py>`_. 


.. _`block:gain`:


.. rst-class:: procgraph:block

``gain``
------------------------------------------------------------
FIXME: to be replaced by simpler function.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/debug_components/__init__.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/debug_components/__init__.py>`_. 


.. _`block:identity`:


.. rst-class:: procgraph:block

``identity``
------------------------------------------------------------
This block outputs the inputs, unchanged. 

This is an example of a block whose signal configuration is dynamics:
init() gets called twice.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Input signals. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Output signals, equal to input. (variable number)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/debug_components/identity.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/debug_components/identity.py>`_. 


.. _`block:info`:


.. rst-class:: procgraph:block

``info``
------------------------------------------------------------
Prints more compact information about the inputs than :ref:`block:print`. 

For numpy arrays it prints their shape and dtype instead of their values.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals to describe. (variable: None <= n <= None)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/debug_components/info.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/debug_components/info.py>`_. 


.. _`block:print`:


.. rst-class:: procgraph:block

``print``
------------------------------------------------------------
Print a representation of the input values along with their timestamp.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals to print. (variable: None <= n <= None)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/debug_components/printc.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/debug_components/printc.py>`_. 


.. _`module:procgraph.components.dynamic`:


.. rst-class:: procgraph:module

Module ``procgraph.components.dynamic``
============================================================



.. rst-class:: procgraph:desc

Blocks performing operations with a dynamic nature. 


.. rst-class:: procgraph:desc_rest


This library contains blocks that perform operations with time.
This library is autoloaded.

.. _`block:derivative`:


.. rst-class:: procgraph:block

``derivative``
------------------------------------------------------------
Computes the derivative of a quantity with 3 taps  (``x[t+1] - x[t-1]``). See also :ref:`block:derivative2`.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: quantity to derive


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x_dot``: approximate derivative


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/derivative.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/derivative.py>`_. 


.. _`block:derivative2`:


.. rst-class:: procgraph:block

``derivative2``
------------------------------------------------------------
Computes the derivative of a quantity with 2 taps (``x[t+1] - x[t]``). See also :ref:`block:derivative`.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: quantity to derive


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x_dot``: approximate derivative


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/derivative2.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/derivative2.py>`_. 


.. _`block:forward_difference`:


.. rst-class:: procgraph:block

``forward_difference``
------------------------------------------------------------
Computes ``x[t+1] - x[t-1]`` normalized with timestamp. 

You want to attach this to :ref:`block:last_n_samples`.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x123``: An array with the last 3 values of x.

- ``t123``: An array with the last 3 values of the timestamp.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x_dot``: Derivative of x


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/derivative.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/derivative.py>`_. 


.. _`block:fps_data_limit`:


.. rst-class:: procgraph:block

``fps_data_limit``
------------------------------------------------------------
This block limits the output update to a certain framerate.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``fps``: Maximum framerate.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals to decimate. (variable: 1 <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Decimated signals. (variable number)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/fps_data_limit.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/fps_data_limit.py>`_. 


.. _`block:fps_print`:


.. rst-class:: procgraph:block

``fps_print``
------------------------------------------------------------
Prints the fps count for the input signals.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

None (variable: 1 <= n <= None)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/fps_print.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/fps_print.py>`_. 


.. _`block:history`:


.. rst-class:: procgraph:block

``history``
------------------------------------------------------------
This block collects the history of a quantity, and outputs two signals ``x`` and ``t``. See also :ref:`block:historyt` and :ref:`block:last_n_samples`.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``interval``: Length of the interval to record.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Sequence of values.

- ``t``: Sequence of timestamps.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/history.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/history.py>`_. 


.. _`block:historyt`:


.. rst-class:: procgraph:block

``historyt``
------------------------------------------------------------
This block collects the signals samples of a signals, and outputs *one* signal containing a tuple  ``(t,x)``. See also :ref:`block:last_n_samples` and :ref:`block:history`.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``interval``: Length of interval (seconds).


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``history``: Tuple ``(t,x)`` containing two arrays.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/historyt.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/historyt.py>`_. 


.. _`block:last_n_samples`:


.. rst-class:: procgraph:block

``last_n_samples``
------------------------------------------------------------
This block collects the last N samples of a signals, and outputs two signals ``x`` and ``t``. See also :ref:`block:historyt` and :ref:`block:history`.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``n``: Number of samples to retain.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Sequence of values.

- ``t``: Sequence of timestamps.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/history.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/history.py>`_. 


.. _`block:sieve`:


.. rst-class:: procgraph:block

``sieve``
------------------------------------------------------------
This block decimates the data in time by transmitting only one in ``n`` updates.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``n``: Decimation level; ``n = 3`` means transmit one in three.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``data``: Arbitrary input signals.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``decimated``: Decimated signals.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/sieve.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/sieve.py>`_. 


.. _`block:sync`:


.. rst-class:: procgraph:block

``sync``
------------------------------------------------------------
This block synchronizes a set of streams to the first stream (the master). 

The first signal is called the "master" signal.
The other (N-1) are slaves.

We guarantee that:

- if the slaves are faster than the master,
  then we output exactly the same.

Example diagrams: ::

    Master  *  *  *   *   *
    Slave   ++++++++++++++++

    Master  *  *  *   *   *
    output? v  v  x   v
    Slave   +    +      +
    output? v    v      v


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals to synchronize. The first is the master. (variable: 2 <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Synchronized signals. (variable number)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/sync.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/sync.py>`_. 


.. _`block:two_step_difference`:


.. rst-class:: procgraph:block

``two_step_difference``
------------------------------------------------------------
Computes ``x[t+1] - x[t]`` normalized with timestamp.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x12``: An array with the last 2 values of x.

- ``t12``: An array with the last 2 values of the timestamp.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x_dot``: Derivative of x


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/derivative2.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/derivative2.py>`_. 


.. _`block:wait`:


.. rst-class:: procgraph:block

``wait``
------------------------------------------------------------
This block waits a given number of updates before transmitting the output.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``n``: Number of updates to wait at the beginning.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Arbitrary signals. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Arbitrary signals, minus the first ``n`` updates. (variable number)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/dynamic/wait.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/dynamic/wait.py>`_. 


.. _`module:procgraph.components.gui`:


.. rst-class:: procgraph:module

Module ``procgraph.components.gui``
============================================================



.. rst-class:: procgraph:desc

Blocks using Matplotlib to display data.

.. _`block:fps_limit`:


.. rst-class:: procgraph:block

``fps_limit``
------------------------------------------------------------
This block limits the output update to a certain *realtime* framerate. 

Note that this uses realtime wall clock time -- not the data time!
This is mean for real-time applications, such as visualization.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``fps``: Realtime fps limit.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Arbitrary signals. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Arbitrary signals with limited framerate. (variable number)


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/gui/fps_limit.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/gui/fps_limit.py>`_. 


.. _`block:plot`:


.. rst-class:: procgraph:block

``plot``
------------------------------------------------------------
Just plots the vector instantaneously. 

|towrite|


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``width`` (default: 320): Image dimension

- ``height`` (default: 240): Image dimension

- ``xlabel`` (default: None): None

- ``ylabel`` (default: None): None

- ``legend`` (default: None): None

- ``title`` (default: None): None

- ``format`` (default: -): None

- ``x_min`` (default: None): None

- ``x_max`` (default: None): None

- ``y_min`` (default: None): None

- ``y_max`` (default: None): None

- ``keep`` (default: False): None


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Vectors to plot. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``rgb``: Resulting image.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/gui/plot.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/gui/plot.py>`_. 


.. _`module:procgraph.components.images`:


.. rst-class:: procgraph:module

Module ``procgraph.components.images``
============================================================



.. rst-class:: procgraph:desc

Blocks for basic operations on images. 


.. rst-class:: procgraph:desc_rest

The  module contains blocks that perform basic operations
on images. The library is autoloaded and has no software dependency.

For more complex operations see also:

* :ref:`module:procgraph.components.cv`
* :ref:`module:procgraph.components.pil`


**Example**

Convert a RGB image to grayscale, and back to a RGB image:::


    |input| -> |rgb2gray| -> |gray2rgb| -> |output|

.. _`block:compose`:


.. rst-class:: procgraph:block

``compose``
------------------------------------------------------------
Compose several images in the same canvas. 


Example configuration: ::

    compose.positions = {y: [0,0], ys: [320,20]}


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``width``: Dimension in pixels.

- ``height``: Dimension in pixels.

- ``positions``: A structure giving the position of each signal in the canvas.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Images to compose. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``canvas``: RGB image


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/images/compose.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/images/compose.py>`_. 


.. _`block:grid`:


.. rst-class:: procgraph:block

``grid``
------------------------------------------------------------
A block that creates a larger image by arranging them in a grid.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``cols``: Columns in the grid.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Images to arrange in a grid. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``grid``: Images arranged in a grid.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/images/imggrid.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/images/imggrid.py>`_. 


.. _`module:procgraph.components.misc`:


.. rst-class:: procgraph:module

Module ``procgraph.components.misc``
============================================================



.. rst-class:: procgraph:desc

Miscellaneous functions to be better organized.

.. _`block:as_json`:


.. rst-class:: procgraph:block

``as_json``
------------------------------------------------------------
Converts the input into a JSON string. 

TODO: add example


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Inputs to transcribe as JSON. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``json``: JSON string.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/misc/json_misc.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/misc/json_misc.py>`_. 


.. _`block:pickle`:


.. rst-class:: procgraph:block

``pickle``
------------------------------------------------------------
Dumps the input as a :py:mod:`pickle` file.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``file``: File to write.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Anything pickable.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/misc/pickling.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/misc/pickling.py>`_. 


.. _`block:to_file`:


.. rst-class:: procgraph:block

``to_file``
------------------------------------------------------------
Prints the input line by line to a given file.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``file``: File to write.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``values``: Anything you wish to print to file.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/misc/to_file.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/misc/to_file.py>`_. 


.. _`module:procgraph.components.robotics`:


.. rst-class:: procgraph:module

Module ``procgraph.components.robotics``
============================================================



.. rst-class:: procgraph:desc

Some functions specific to robotics applications.

.. _`block:laser_display`:


.. rst-class:: procgraph:block

``laser_display``
------------------------------------------------------------
Produces a plot of a range-finder scan. 


display_sick.groups = [{ indices: [0,179], theta: [-1.57,+1.57],
         color: 'r', origin: [0,0,0]}]


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``width`` (default: 320): None

- ``height`` (default: 320): None

- ``max_readings`` (default: 30): None

- ``groups``: How to group and draw the readings. (see example)


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``readings``: None


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``image``: None


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/robotics/laser_display.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/robotics/laser_display.py>`_. 


.. _`block:pose2commands`:


.. rst-class:: procgraph:block

``pose2commands``
------------------------------------------------------------
Computes the velocity commands from the odometry data.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``pose``: Odometry ``[x,y,theta]``.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``commands``: Estimated commands ``[vx,vy,omega]``.

- ``vx``: None

- ``vy``: None

- ``omega``: None


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/robotics/pose2velocity.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/robotics/pose2velocity.py>`_. 


.. _`block:pose2vel_`:


.. rst-class:: procgraph:block

``pose2vel_``
------------------------------------------------------------
Block used by :ref:`block:pose2commands`.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``q12``: Last two poses.

- ``t12``: Last two timestamps.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``commands``: Estimated commands ``[vx,vy,omega]``.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/robotics/pose2velocity.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/robotics/pose2velocity.py>`_. 


.. _`module:procgraph.components.signals`:


.. rst-class:: procgraph:module

Module ``procgraph.components.signals``
============================================================



.. rst-class:: procgraph:desc

Simple routins for signals extraction, combination.

.. _`block:extract`:


.. rst-class:: procgraph:block

``extract``
------------------------------------------------------------
This block extracts some of the components of a vector.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``index``: None


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``vector``: None


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``part``: None


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/signals/extract.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/signals/extract.py>`_. 


.. _`block:join`:


.. rst-class:: procgraph:block

``join``
------------------------------------------------------------
This block joins multiple signals into one.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Signals to be joined together. (variable: None <= n <= None)


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``joined``: Joined signals.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/signals/join.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/signals/join.py>`_. 


.. _`module:procgraph.components.statistics`:


.. rst-class:: procgraph:module

Module ``procgraph.components.statistics``
============================================================



.. rst-class:: procgraph:desc

Blocks for common statistical operations.

.. _`block:covariance`:


.. rst-class:: procgraph:block

``covariance``
------------------------------------------------------------
Computes the covariance matrix of the input


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``wait`` (default: 10): Number of sample to have reliable expectation.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Unidimensional numpy array.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``cov_x``: Square matrix representing sample covariance.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/statistics/covariance.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/statistics/covariance.py>`_. 


.. _`block:expectation`:


.. rst-class:: procgraph:block

``expectation``
------------------------------------------------------------
Computes the sample expectation of a signal.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Any numpy array.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``Ex``: Expectation of input.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/statistics/expectation.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/statistics/expectation.py>`_. 


.. _`block:normalize`:


.. rst-class:: procgraph:block

``normalize``
------------------------------------------------------------
Removes the mean from a signal.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``wait`` (default: 10): Number of sample to have reliable expectation.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Unidimensional numpy array.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x_n``: Signal without the mean.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/statistics/covariance.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/statistics/covariance.py>`_. 


.. _`block:soft_variance`:


.. rst-class:: procgraph:block

``soft_variance``
------------------------------------------------------------
Computes the element-wise "soft" variance (expectation of error absolute value)


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``wait`` (default: 100): Number of samples to wait before declaring the expectation valid.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Any numpy array


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``var_x``: Soft variance of ``x``.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/statistics/variance.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/statistics/variance.py>`_. 


.. _`block:variance`:


.. rst-class:: procgraph:block

``variance``
------------------------------------------------------------
Computes the element-wise variance.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``wait`` (default: 100): Number of samples to wait before declaring the expectation valid.


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``x``: Any numpy array


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``var_x``: Variance of ``x``.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/statistics/variance.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/statistics/variance.py>`_. 


.. _`module:procgraph.components.video`:


.. rst-class:: procgraph:module

Module ``procgraph.components.video``
============================================================



.. rst-class:: procgraph:desc

Blocks for encoding/decoding video based on MPlayer.

.. _`block:mencoder`:


.. rst-class:: procgraph:block

``mencoder``
------------------------------------------------------------
Encodes a video stream using ``mencoder``. 

Note that allowed codec and bitrate depend on your version of mencoder.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``file``: Output file (AVI format.)

- ``fps`` (default: 10): Framerate of resulting movie.

- ``vcodec`` (default: mpeg4): Codec to use.

- ``vbitrate`` (default: 1000000): Bitrate -- default is reasonable.

- ``quiet`` (default: True): If True, suppress mencoder's messages


.. rst-class:: procgraph:input

Input
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``image``: H x W x 3  uint8 numpy array representing an RGB image.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/video/mencoder.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/video/mencoder.py>`_. 


.. _`block:mplayer`:


.. rst-class:: procgraph:block

``mplayer``
------------------------------------------------------------
Decodes a video stream.


.. rst-class:: procgraph:config

Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``file``: Input video file. Any format that ``mplayer`` understands.

- ``quiet`` (default: True): If true, suppress messages from mplayer.


.. rst-class:: procgraph:output

Output
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- ``video``: RGB stream as numpy array.


.. rst-class:: procgraph:source

Implemented in `/src/procgraph/components/video/mplayer.py <https://github.com/AndreaCensi/procgraph/blob/master//src/procgraph/components/video/mplayer.py>`_. 


