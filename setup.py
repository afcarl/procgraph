from setuptools import setup, find_packages
from collections import namedtuple

# Load autogenerated list of packages and dependencies
from procgraph_packages import index


def is_package_available(p):
	''' Checks that a package is available. '''
	try:
		__import__(p)
		return True
 	except ImportError as e:
         print("Warning: cannot import %r: %s" % (p, e)) 
         return False

missing = set()
problems = set()
for module, info in index['packages'].items():
    for requirement, options in info['requires'].items():
        if not any([is_package_available(op) for op in options]):
            print("For package %r, dependency %r cannot be satisfied." % 
				  (module, requirement))
            missing.add(requirement)
            problems.add(module)

if missing:
    print('\n\n')
    print('I could not find the following packages installed:')
    for m in missing:
        print(' - %s' % m)
    print('\nThese missing requirements could make the following packages not work properly:')
    for p in problems:
        desc = index['packages'][p]['desc']
        print(' - %15s  (%s)' % (p, desc))
        
    print('\nI will go ahead and install everything, but you should install the missing'
          ' packages for maximum functionality.\n'
          )
    raw_input('    Press any key to continue...')  
    print('\n\n')





packages = find_packages(where='src')

setup(name='procgraph',
	  version="0.9",
      package_dir={'':'src'},
      #packages=['procgraph'] + ok_to_install,
      packages=packages,
      install_requires=['pyparsing',
                        'simplejson',
                        'numpy',
                        'setproctitle',
                        'termcolor'],
      entry_points={
         'console_scripts': [
           'pg = procgraph.scripts.pg:main',
           'pgdoc = procgraph.scripts.pgdoc:main',
           'pgindex = procgraph.scripts.pgindex:main'
        ]
      },
)


